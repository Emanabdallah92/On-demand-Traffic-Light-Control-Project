
Build your own driver library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001020  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  00001094  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001675  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ea  00000000  00000000  000028cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fa4  00000000  00000000  000032b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  0000425c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068b  00000000  00000000  0000450c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e06  00000000  00000000  00004b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000599d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a8 03 	jmp	0x750	; 0x750 <__vector_1>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a4 37       	cpi	r26, 0x74	; 116
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 1d 04 	call	0x83a	; 0x83a <main>
      74:	0c 94 0e 08 	jmp	0x101c	; 0x101c <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:

uint8_t button = 0;

APP_ERROR_T APP_init(void)
{	
	current_time = time_passed;
      7c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <time_passed>
      80:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <time_passed+0x1>
      84:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <time_passed+0x2>
      88:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <time_passed+0x3>
      8c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <current_time>
      90:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <current_time+0x1>
      94:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <current_time+0x2>
      98:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <current_time+0x3>
	
	//initiate the pedestrian push button
	BUTTON_init(2, PORT_D);
      9c:	64 e4       	ldi	r22, 0x44	; 68
      9e:	82 e0       	ldi	r24, 0x02	; 2
      a0:	0e 94 11 04 	call	0x822	; 0x822 <BUTTON_init>
	
	//Enable timer0 NORMAL MODE and set Prescaler= 1
	timer0_init(1);
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	0e 94 20 06 	call	0xc40	; 0xc40 <timer0_init>
	
	//Enable overflow interrupt
	timer0_enableInterrupt();
      ac:	0e 94 75 06 	call	0xcea	; 0xcea <timer0_enableInterrupt>
	
	//initiate the three  CAR's LEDs
	//initiate the Green LED on port A pin 0
	LED_init(0, PORT_A);
      b0:	61 e4       	ldi	r22, 0x41	; 65
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LED_init>
	//initiate the Yellow LED on port A pin 1
	LED_init(1, PORT_A);
      b8:	61 e4       	ldi	r22, 0x41	; 65
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LED_init>
	//initiate the Red LED on port A pin 2
	LED_init(2, PORT_A);
      c0:	61 e4       	ldi	r22, 0x41	; 65
      c2:	82 e0       	ldi	r24, 0x02	; 2
      c4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LED_init>
	
	//initiate the three PEDESTRIAN's LEDs
	//initiate the Green LED on port B pin 0
	LED_init(0, PORT_B);
      c8:	62 e4       	ldi	r22, 0x42	; 66
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LED_init>
	//initiate the Yellow LED on port B pin 1
	LED_init(1, PORT_B);
      d0:	62 e4       	ldi	r22, 0x42	; 66
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LED_init>
	//initiate the Red LED on port B pin 2
	LED_init(2, PORT_B);
      d8:	62 e4       	ldi	r22, 0x42	; 66
      da:	82 e0       	ldi	r24, 0x02	; 2
      dc:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LED_init>
	
	//enable global interrupt - set 1 in bit 7 in SREG
	enable_globalInterrupt();
      e0:	0e 94 b9 05 	call	0xb72	; 0xb72 <enable_globalInterrupt>
	
	//Enable external interrupt 0 and choose external interrupt sense - PIN CHANGE mode
	extEnable_pin(INT_0, PIN_CHANGE);
      e4:	61 e0       	ldi	r22, 0x01	; 1
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 be 05 	call	0xb7c	; 0xb7c <extEnable_pin>

	
}
      ec:	08 95       	ret

000000ee <APP_start>:

APP_ERROR_T APP_start(void)
{	int i=0;
	switch(button)
      ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      f2:	88 23       	and	r24, r24
      f4:	21 f0       	breq	.+8      	; 0xfe <APP_start+0x10>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	09 f4       	brne	.+2      	; 0xfc <APP_start+0xe>
      fa:	0d c1       	rjmp	.+538    	; 0x316 <APP_start+0x228>
      fc:	08 95       	ret
	{	//CAR's MODE
		case 0:
			if (time_passed < delay_time)
      fe:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     102:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     106:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     10a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     10e:	20 e0       	ldi	r18, 0x00	; 0
     110:	30 e4       	ldi	r19, 0x40	; 64
     112:	4c e9       	ldi	r20, 0x9C	; 156
     114:	55 e4       	ldi	r21, 0x45	; 69
     116:	0e 94 e7 06 	call	0xdce	; 0xdce <__cmpsf2>
     11a:	88 23       	and	r24, r24
     11c:	9c f4       	brge	.+38     	; 0x144 <APP_start+0x56>
			{
				//Turn on LED Green for 5s
				LED_on(0, PORT_A);
     11e:	61 e4       	ldi	r22, 0x41	; 65
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
				Green = true;
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Green>
				//Turn off LED RED and Yellow
				LED_off(1, PORT_A);
     12c:	61 e4       	ldi	r22, 0x41	; 65
     12e:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
				LED_off(2, PORT_A);
     132:	61 e4       	ldi	r22, 0x41	; 65
     134:	82 e0       	ldi	r24, 0x02	; 2
     136:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
				Yellow = false;
     13a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Yellow>
				Red = false;
     13e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Red>
     142:	cf c0       	rjmp	.+414    	; 0x2e2 <APP_start+0x1f4>
			}
			
			else if ((time_passed > delay_time) && (time_passed < 10000))
     144:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     148:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     14c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     150:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e4       	ldi	r19, 0x40	; 64
     158:	4c e9       	ldi	r20, 0x9C	; 156
     15a:	55 e4       	ldi	r21, 0x45	; 69
     15c:	0e 94 09 08 	call	0x1012	; 0x1012 <__gesf2>
     160:	18 16       	cp	r1, r24
     162:	ec f5       	brge	.+122    	; 0x1de <APP_start+0xf0>
     164:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     168:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     16c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     170:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e4       	ldi	r19, 0x40	; 64
     178:	4c e1       	ldi	r20, 0x1C	; 28
     17a:	56 e4       	ldi	r21, 0x46	; 70
     17c:	0e 94 e7 06 	call	0xdce	; 0xdce <__cmpsf2>
     180:	88 23       	and	r24, r24
     182:	6c f5       	brge	.+90     	; 0x1de <APP_start+0xf0>
			{	
				//Turn off LED RED and Green
				LED_off(0, PORT_A);
     184:	61 e4       	ldi	r22, 0x41	; 65
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
				LED_off(2, PORT_A);
     18c:	61 e4       	ldi	r22, 0x41	; 65
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
				Yellow = true;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Yellow>
				Red = false;
     19a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Red>
				Green = false;
     19e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Green>
				// Yellow Led is blinking
				if ((int)(time_passed/1000) % 2 == 0)
     1a2:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     1a6:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     1aa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     1ae:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	4a e7       	ldi	r20, 0x7A	; 122
     1b8:	54 e4       	ldi	r21, 0x44	; 68
     1ba:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__divsf3>
     1be:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixsfsi>
     1c2:	61 70       	andi	r22, 0x01	; 1
     1c4:	77 27       	eor	r23, r23
     1c6:	67 2b       	or	r22, r23
     1c8:	29 f4       	brne	.+10     	; 0x1d4 <APP_start+0xe6>
				{
					//Turn on LED Yellow
					LED_on(1, PORT_A); 
     1ca:	61 e4       	ldi	r22, 0x41	; 65
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
     1d2:	87 c0       	rjmp	.+270    	; 0x2e2 <APP_start+0x1f4>
				}
				else
				{
					//Turn off LED Yellow 
					LED_off(1, PORT_A); 
     1d4:	61 e4       	ldi	r22, 0x41	; 65
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
     1dc:	82 c0       	rjmp	.+260    	; 0x2e2 <APP_start+0x1f4>
				}	
			}
			
			else if ((time_passed > 10000) && (time_passed < 15000))
     1de:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     1e2:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     1e6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     1ea:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e4       	ldi	r19, 0x40	; 64
     1f2:	4c e1       	ldi	r20, 0x1C	; 28
     1f4:	56 e4       	ldi	r21, 0x46	; 70
     1f6:	0e 94 09 08 	call	0x1012	; 0x1012 <__gesf2>
     1fa:	18 16       	cp	r1, r24
     1fc:	34 f5       	brge	.+76     	; 0x24a <APP_start+0x15c>
     1fe:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     202:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     206:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     20a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e6       	ldi	r19, 0x60	; 96
     212:	4a e6       	ldi	r20, 0x6A	; 106
     214:	56 e4       	ldi	r21, 0x46	; 70
     216:	0e 94 e7 06 	call	0xdce	; 0xdce <__cmpsf2>
     21a:	88 23       	and	r24, r24
     21c:	b4 f4       	brge	.+44     	; 0x24a <APP_start+0x15c>
			{	
				Red = true;
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Red>
				Yellow = false;
     224:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Yellow>
				Green = false;
     228:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Green>
				//Turn on LED Red for 5s
				LED_on(2, PORT_A);
     22c:	61 e4       	ldi	r22, 0x41	; 65
     22e:	82 e0       	ldi	r24, 0x02	; 2
     230:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
				//Turn off LED Green and Yellow
				LED_off(0, PORT_A);
     234:	61 e4       	ldi	r22, 0x41	; 65
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
				LED_off(1, PORT_A);
     23c:	61 e4       	ldi	r22, 0x41	; 65
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
				Green = false;
     244:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Green>
     248:	4c c0       	rjmp	.+152    	; 0x2e2 <APP_start+0x1f4>
				
			}
			
			else if ((time_passed > 15000) && (time_passed < 20000))
     24a:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     24e:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     252:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     256:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e6       	ldi	r19, 0x60	; 96
     25e:	4a e6       	ldi	r20, 0x6A	; 106
     260:	56 e4       	ldi	r21, 0x46	; 70
     262:	0e 94 09 08 	call	0x1012	; 0x1012 <__gesf2>
     266:	18 16       	cp	r1, r24
     268:	e4 f5       	brge	.+120    	; 0x2e2 <APP_start+0x1f4>
     26a:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     26e:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     272:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     276:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e4       	ldi	r19, 0x40	; 64
     27e:	4c e9       	ldi	r20, 0x9C	; 156
     280:	56 e4       	ldi	r21, 0x46	; 70
     282:	0e 94 e7 06 	call	0xdce	; 0xdce <__cmpsf2>
     286:	88 23       	and	r24, r24
     288:	64 f5       	brge	.+88     	; 0x2e2 <APP_start+0x1f4>
			{	
				//Turn off LED RED and Green
				LED_off(0, PORT_A);
     28a:	61 e4       	ldi	r22, 0x41	; 65
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
				LED_off(2, PORT_A);
     292:	61 e4       	ldi	r22, 0x41	; 65
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
				Red = false;
     29a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Red>
				Green = false;
     29e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Green>
				
				//Blinking Yellow LED
				if ((int)(time_passed/1000) % 2 == 0)
     2a2:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     2a6:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     2aa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     2ae:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	4a e7       	ldi	r20, 0x7A	; 122
     2b8:	54 e4       	ldi	r21, 0x44	; 68
     2ba:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__divsf3>
     2be:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixsfsi>
     2c2:	61 70       	andi	r22, 0x01	; 1
     2c4:	77 27       	eor	r23, r23
     2c6:	67 2b       	or	r22, r23
     2c8:	29 f4       	brne	.+10     	; 0x2d4 <APP_start+0x1e6>
				{
					//Turn on LED Yellow
					LED_on(1, PORT_A);
     2ca:	61 e4       	ldi	r22, 0x41	; 65
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
     2d2:	04 c0       	rjmp	.+8      	; 0x2dc <APP_start+0x1ee>
				}
				else
				{
					//Turn off LED Yellow
					LED_off(1, PORT_A);
     2d4:	61 e4       	ldi	r22, 0x41	; 65
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
				}
				Yellow = true;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Yellow>
			}
			
			if(time_passed>20000)
     2e2:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     2e6:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     2ea:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     2ee:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e4       	ldi	r19, 0x40	; 64
     2f6:	4c e9       	ldi	r20, 0x9C	; 156
     2f8:	56 e4       	ldi	r21, 0x46	; 70
     2fa:	0e 94 09 08 	call	0x1012	; 0x1012 <__gesf2>
     2fe:	18 16       	cp	r1, r24
     300:	0c f0       	brlt	.+2      	; 0x304 <APP_start+0x216>
     302:	ed c1       	rjmp	.+986    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
			{
				time_passed=0;
     304:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <time_passed>
     308:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <time_passed+0x1>
     30c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <time_passed+0x2>
     310:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <time_passed+0x3>
     314:	08 95       	ret
			}
		break;
		//Pedestrian's mode
		case 1:
			//WHEN THE BUTTON IS PRESSED WHEN THE CAR'S RED LED IS ON
			if(Red == true)
     316:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Red>
     31a:	88 23       	and	r24, r24
     31c:	09 f4       	brne	.+2      	; 0x320 <APP_start+0x232>
     31e:	c2 c0       	rjmp	.+388    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
			{	
				if(time_passed <delay_time)
     320:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     324:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     328:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     32c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e4       	ldi	r19, 0x40	; 64
     334:	4c e9       	ldi	r20, 0x9C	; 156
     336:	55 e4       	ldi	r21, 0x45	; 69
     338:	0e 94 e7 06 	call	0xdce	; 0xdce <__cmpsf2>
     33c:	88 23       	and	r24, r24
     33e:	8c f4       	brge	.+34     	; 0x362 <APP_start+0x274>
				{
					//Turn on Car's Red LED for 5s
					LED_on(2, PORT_A);
     340:	61 e4       	ldi	r22, 0x41	; 65
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
					
					//Turn on Pedestrian's Green LED for 5s
					LED_on(0, PORT_B);
     348:	62 e4       	ldi	r22, 0x42	; 66
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
					LED_off(1, PORT_B);
     350:	62 e4       	ldi	r22, 0x42	; 66
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					LED_off(2, PORT_B);
     358:	62 e4       	ldi	r22, 0x42	; 66
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
     360:	a1 c0       	rjmp	.+322    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
				}
				else if((time_passed>delay_time) && (time_passed<10000))
     362:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     366:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     36a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     36e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e4       	ldi	r19, 0x40	; 64
     376:	4c e9       	ldi	r20, 0x9C	; 156
     378:	55 e4       	ldi	r21, 0x45	; 69
     37a:	0e 94 09 08 	call	0x1012	; 0x1012 <__gesf2>
     37e:	18 16       	cp	r1, r24
     380:	d4 f5       	brge	.+116    	; 0x3f6 <APP_start+0x308>
     382:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     386:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     38a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     38e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e4       	ldi	r19, 0x40	; 64
     396:	4c e1       	ldi	r20, 0x1C	; 28
     398:	56 e4       	ldi	r21, 0x46	; 70
     39a:	0e 94 e7 06 	call	0xdce	; 0xdce <__cmpsf2>
     39e:	88 23       	and	r24, r24
     3a0:	54 f5       	brge	.+84     	; 0x3f6 <APP_start+0x308>
				{
					//Turn off Car's Red LED
					LED_off(2, PORT_A);
     3a2:	61 e4       	ldi	r22, 0x41	; 65
     3a4:	82 e0       	ldi	r24, 0x02	; 2
     3a6:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					
					//  Both Yellow LEDs start blinking for 5 seconds
					if ((int)(time_passed/1000) % 2 == 0)
     3aa:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     3ae:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     3b2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     3b6:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	4a e7       	ldi	r20, 0x7A	; 122
     3c0:	54 e4       	ldi	r21, 0x44	; 68
     3c2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__divsf3>
     3c6:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixsfsi>
     3ca:	61 70       	andi	r22, 0x01	; 1
     3cc:	77 27       	eor	r23, r23
     3ce:	67 2b       	or	r22, r23
     3d0:	49 f4       	brne	.+18     	; 0x3e4 <APP_start+0x2f6>
					{
						//Turn on Car's Yellow LED
						LED_on(1, PORT_A);
     3d2:	61 e4       	ldi	r22, 0x41	; 65
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
						
						//Turn on Pedestrian's Yellow LED
						LED_on(1, PORT_B);
     3da:	62 e4       	ldi	r22, 0x42	; 66
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
     3e2:	60 c0       	rjmp	.+192    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
					}
					else
					{
						//Turn off Car's Yellow LED
						LED_off(1, PORT_A);
     3e4:	61 e4       	ldi	r22, 0x41	; 65
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
						
						//Turn off Pedestrian's Yellow LED
						LED_off(1, PORT_B);
     3ec:	62 e4       	ldi	r22, 0x42	; 66
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
     3f4:	57 c0       	rjmp	.+174    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
					}
				}
				else if((time_passed>10000) && (time_passed<15000))
     3f6:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     3fa:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     3fe:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     402:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e4       	ldi	r19, 0x40	; 64
     40a:	4c e1       	ldi	r20, 0x1C	; 28
     40c:	56 e4       	ldi	r21, 0x46	; 70
     40e:	0e 94 09 08 	call	0x1012	; 0x1012 <__gesf2>
     412:	18 16       	cp	r1, r24
     414:	2c f5       	brge	.+74     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     416:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     41a:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     41e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     422:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e6       	ldi	r19, 0x60	; 96
     42a:	4a e6       	ldi	r20, 0x6A	; 106
     42c:	56 e4       	ldi	r21, 0x46	; 70
     42e:	0e 94 e7 06 	call	0xdce	; 0xdce <__cmpsf2>
     432:	88 23       	and	r24, r24
     434:	ac f4       	brge	.+42     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
				{	
					//Turn off Car's Yellow LED
					LED_off(1, PORT_A);
     436:	61 e4       	ldi	r22, 0x41	; 65
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					//Turn off Pedestrian's Yellow LED
					LED_off(1, PORT_B);
     43e:	62 e4       	ldi	r22, 0x42	; 66
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					//Turn off Pedestrian's Green LED
					LED_off(0, PORT_B);
     446:	62 e4       	ldi	r22, 0x42	; 66
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					//Turn on Pedestrian's Red LED
					LED_on(2, PORT_B);
     44e:	62 e4       	ldi	r22, 0x42	; 66
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
					//Turn on Car's Green LED
					LED_on(0, PORT_A);
     456:	61 e4       	ldi	r22, 0x41	; 65
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
     45e:	22 c0       	rjmp	.+68     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
				}
				else if(time_passed>15000)
     460:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     464:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     468:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     46c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e6       	ldi	r19, 0x60	; 96
     474:	4a e6       	ldi	r20, 0x6A	; 106
     476:	56 e4       	ldi	r21, 0x46	; 70
     478:	0e 94 09 08 	call	0x1012	; 0x1012 <__gesf2>
     47c:	18 16       	cp	r1, r24
     47e:	94 f4       	brge	.+36     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
				{
					//Turn off Pedestrian's Red LED
					LED_off(2, PORT_B);
     480:	62 e4       	ldi	r22, 0x42	; 66
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					//Turn off Car's Green LED
					LED_off(0, PORT_A);
     488:	61 e4       	ldi	r22, 0x41	; 65
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					button = 0;
     490:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
					time_passed=0;
     494:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <time_passed>
     498:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <time_passed+0x1>
     49c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <time_passed+0x2>
     4a0:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <time_passed+0x3>
				}
			}
			
			//WHEN THE BUTTON IS PRESSED WHEN THE CAR'S GREEN LED IS ON
			if((Green == true) || (Yellow == true))
     4a4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Green>
     4a8:	81 11       	cpse	r24, r1
     4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4ac:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Yellow>
     4b0:	88 23       	and	r24, r24
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4b4:	14 c1       	rjmp	.+552    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
			{	
				if((time_passed<delay_time))
     4b6:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     4ba:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     4be:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     4c2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e4       	ldi	r19, 0x40	; 64
     4ca:	4c e9       	ldi	r20, 0x9C	; 156
     4cc:	55 e4       	ldi	r21, 0x45	; 69
     4ce:	0e 94 e7 06 	call	0xdce	; 0xdce <__cmpsf2>
     4d2:	88 23       	and	r24, r24
     4d4:	74 f5       	brge	.+92     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
				{	
					//Turn off Car's Green LED
					LED_off(0, PORT_A);
     4d6:	61 e4       	ldi	r22, 0x41	; 65
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					//Turn on Pedestrian's Red LED
					LED_on(2, PORT_B);
     4de:	62 e4       	ldi	r22, 0x42	; 66
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
					if ((int)(time_passed/1000) % 2 == 0)
     4e6:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     4ea:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     4ee:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     4f2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	4a e7       	ldi	r20, 0x7A	; 122
     4fc:	54 e4       	ldi	r21, 0x44	; 68
     4fe:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__divsf3>
     502:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixsfsi>
     506:	61 70       	andi	r22, 0x01	; 1
     508:	77 27       	eor	r23, r23
     50a:	67 2b       	or	r22, r23
     50c:	49 f4       	brne	.+18     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
					{
						//Turn on Car's Yellow LED
						LED_on(1, PORT_A);
     50e:	61 e4       	ldi	r22, 0x41	; 65
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
						//Turn on Pedestrian's Yellow LED 
						LED_on(1, PORT_B);
     516:	62 e4       	ldi	r22, 0x42	; 66
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
     51e:	08 95       	ret
					}
					else
					{
						//Turn off Car's Yellow LED
						LED_off(1, PORT_A);
     520:	61 e4       	ldi	r22, 0x41	; 65
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
						//Turn off Pedestrian's Yellow LED
						LED_off(1, PORT_B);
     528:	62 e4       	ldi	r22, 0x42	; 66
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
     530:	08 95       	ret
					}
				}
				else if((time_passed> delay_time) && (time_passed<10000))
     532:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     536:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     53a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     53e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e4       	ldi	r19, 0x40	; 64
     546:	4c e9       	ldi	r20, 0x9C	; 156
     548:	55 e4       	ldi	r21, 0x45	; 69
     54a:	0e 94 09 08 	call	0x1012	; 0x1012 <__gesf2>
     54e:	18 16       	cp	r1, r24
     550:	2c f5       	brge	.+74     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
     552:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     556:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     55a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     55e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e4       	ldi	r19, 0x40	; 64
     566:	4c e1       	ldi	r20, 0x1C	; 28
     568:	56 e4       	ldi	r21, 0x46	; 70
     56a:	0e 94 e7 06 	call	0xdce	; 0xdce <__cmpsf2>
     56e:	88 23       	and	r24, r24
     570:	ac f4       	brge	.+42     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
				{	
					//Turn off Car's Yellow LED
					LED_off(1, PORT_A);
     572:	61 e4       	ldi	r22, 0x41	; 65
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					//Turn off Pedestrian's Yellow LED
					LED_off(1, PORT_B);
     57a:	62 e4       	ldi	r22, 0x42	; 66
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					//Turn off Pedestrian's Red LED
					LED_off(2, PORT_B);
     582:	62 e4       	ldi	r22, 0x42	; 66
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					//Turn on Pedestrian's Green LED
					LED_on(0, PORT_B);
     58a:	62 e4       	ldi	r22, 0x42	; 66
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
					//Turn on Car's Red LED
					LED_on(2, PORT_A);
     592:	61 e4       	ldi	r22, 0x41	; 65
     594:	82 e0       	ldi	r24, 0x02	; 2
     596:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
     59a:	08 95       	ret
				}
				else if((time_passed>10000) && (time_passed<15000))
     59c:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     5a0:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     5a4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     5a8:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e4       	ldi	r19, 0x40	; 64
     5b0:	4c e1       	ldi	r20, 0x1C	; 28
     5b2:	56 e4       	ldi	r21, 0x46	; 70
     5b4:	0e 94 09 08 	call	0x1012	; 0x1012 <__gesf2>
     5b8:	18 16       	cp	r1, r24
     5ba:	d4 f5       	brge	.+116    	; 0x630 <__EEPROM_REGION_LENGTH__+0x230>
     5bc:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     5c0:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     5c4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     5c8:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e6       	ldi	r19, 0x60	; 96
     5d0:	4a e6       	ldi	r20, 0x6A	; 106
     5d2:	56 e4       	ldi	r21, 0x46	; 70
     5d4:	0e 94 e7 06 	call	0xdce	; 0xdce <__cmpsf2>
     5d8:	88 23       	and	r24, r24
     5da:	54 f5       	brge	.+84     	; 0x630 <__EEPROM_REGION_LENGTH__+0x230>
				{		
						//Turn off Car's Red LED
						LED_off(2, PORT_A);
     5dc:	61 e4       	ldi	r22, 0x41	; 65
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
						
						//  Both Yellow LEDs start blinking for 5 seconds
						if ((int)(time_passed/1000) % 2 == 0)
     5e4:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     5e8:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     5ec:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     5f0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	4a e7       	ldi	r20, 0x7A	; 122
     5fa:	54 e4       	ldi	r21, 0x44	; 68
     5fc:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__divsf3>
     600:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixsfsi>
     604:	61 70       	andi	r22, 0x01	; 1
     606:	77 27       	eor	r23, r23
     608:	67 2b       	or	r22, r23
     60a:	49 f4       	brne	.+18     	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
						{
							//Turn on Car's Yellow LED
							LED_on(1, PORT_A);
     60c:	61 e4       	ldi	r22, 0x41	; 65
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
							
							//Turn on Pedestrian's Yellow LED
							LED_on(1, PORT_B);
     614:	62 e4       	ldi	r22, 0x42	; 66
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
     61c:	08 95       	ret
						}
						else
						{
							//Turn off Car's Yellow LED
							LED_off(1, PORT_A);
     61e:	61 e4       	ldi	r22, 0x41	; 65
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
							
							//Turn off Pedestrian's Yellow LED
							LED_off(1, PORT_B);
     626:	62 e4       	ldi	r22, 0x42	; 66
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
     62e:	08 95       	ret
						}
				}
				else if((time_passed>15000) && (time_passed<20000))
     630:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     634:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     638:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     63c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e6       	ldi	r19, 0x60	; 96
     644:	4a e6       	ldi	r20, 0x6A	; 106
     646:	56 e4       	ldi	r21, 0x46	; 70
     648:	0e 94 09 08 	call	0x1012	; 0x1012 <__gesf2>
     64c:	18 16       	cp	r1, r24
     64e:	2c f5       	brge	.+74     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
     650:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     654:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     658:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     65c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e4       	ldi	r19, 0x40	; 64
     664:	4c e9       	ldi	r20, 0x9C	; 156
     666:	56 e4       	ldi	r21, 0x46	; 70
     668:	0e 94 e7 06 	call	0xdce	; 0xdce <__cmpsf2>
     66c:	88 23       	and	r24, r24
     66e:	ac f4       	brge	.+42     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
				{	
					//Turn off Car's Yellow LED
					LED_off(1, PORT_A);
     670:	61 e4       	ldi	r22, 0x41	; 65
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					//Turn off Pedestrian's Yellow LED
					LED_off(1, PORT_B);
     678:	62 e4       	ldi	r22, 0x42	; 66
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					//Turn off Pedestrian's Green LED
					LED_off(0, PORT_B);
     680:	62 e4       	ldi	r22, 0x42	; 66
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					//Turn on Pedestrian's Red LED
					LED_on(2, PORT_B);
     688:	62 e4       	ldi	r22, 0x42	; 66
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
					//Turn on Car's Green LED
					LED_on(0, PORT_A);
     690:	61 e4       	ldi	r22, 0x41	; 65
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	0e 94 af 05 	call	0xb5e	; 0xb5e <LED_on>
     698:	08 95       	ret
				}
				else if(time_passed>20000)
     69a:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     69e:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     6a2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     6a6:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e4       	ldi	r19, 0x40	; 64
     6ae:	4c e9       	ldi	r20, 0x9C	; 156
     6b0:	56 e4       	ldi	r21, 0x46	; 70
     6b2:	0e 94 09 08 	call	0x1012	; 0x1012 <__gesf2>
     6b6:	18 16       	cp	r1, r24
     6b8:	94 f4       	brge	.+36     	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
				{
					
					//Turn off Pedestrian's Red LED
					LED_off(2, PORT_B);
     6ba:	62 e4       	ldi	r22, 0x42	; 66
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					//Turn off Car's Green LED
					LED_off(0, PORT_A);
     6c2:	61 e4       	ldi	r22, 0x41	; 65
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	0e 94 b4 05 	call	0xb68	; 0xb68 <LED_off>
					button = 0;
     6ca:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
					time_passed=0;
     6ce:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <time_passed>
     6d2:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <time_passed+0x1>
     6d6:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <time_passed+0x2>
     6da:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <time_passed+0x3>
			}
			
		
		break;	
	}
}
     6de:	08 95       	ret

000006e0 <__vector_11>:

ISR (TIM0_OVF)
{
     6e0:	1f 92       	push	r1
     6e2:	0f 92       	push	r0
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	0f 92       	push	r0
     6e8:	11 24       	eor	r1, r1
     6ea:	2f 93       	push	r18
     6ec:	3f 93       	push	r19
     6ee:	4f 93       	push	r20
     6f0:	5f 93       	push	r21
     6f2:	6f 93       	push	r22
     6f4:	7f 93       	push	r23
     6f6:	8f 93       	push	r24
     6f8:	9f 93       	push	r25
     6fa:	af 93       	push	r26
     6fc:	bf 93       	push	r27
     6fe:	ef 93       	push	r30
     700:	ff 93       	push	r31
	//At frequency 1MHZ and prescalar 1 this function will be called every 0.256ms

	time_passed += 0.256;
     702:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     706:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     70a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     70e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     712:	2f e6       	ldi	r18, 0x6F	; 111
     714:	32 e1       	ldi	r19, 0x12	; 18
     716:	43 e8       	ldi	r20, 0x83	; 131
     718:	5e e3       	ldi	r21, 0x3E	; 62
     71a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__addsf3>
     71e:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <time_passed>
     722:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <time_passed+0x1>
     726:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <time_passed+0x2>
     72a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <time_passed+0x3>
}
     72e:	ff 91       	pop	r31
     730:	ef 91       	pop	r30
     732:	bf 91       	pop	r27
     734:	af 91       	pop	r26
     736:	9f 91       	pop	r25
     738:	8f 91       	pop	r24
     73a:	7f 91       	pop	r23
     73c:	6f 91       	pop	r22
     73e:	5f 91       	pop	r21
     740:	4f 91       	pop	r20
     742:	3f 91       	pop	r19
     744:	2f 91       	pop	r18
     746:	0f 90       	pop	r0
     748:	0f be       	out	0x3f, r0	; 63
     74a:	0f 90       	pop	r0
     74c:	1f 90       	pop	r1
     74e:	18 95       	reti

00000750 <__vector_1>:

ISR (EXT_INT_0)
{
     750:	1f 92       	push	r1
     752:	0f 92       	push	r0
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	0f 92       	push	r0
     758:	11 24       	eor	r1, r1
     75a:	2f 93       	push	r18
     75c:	3f 93       	push	r19
     75e:	4f 93       	push	r20
     760:	5f 93       	push	r21
     762:	6f 93       	push	r22
     764:	7f 93       	push	r23
     766:	8f 93       	push	r24
     768:	9f 93       	push	r25
     76a:	af 93       	push	r26
     76c:	bf 93       	push	r27
     76e:	ef 93       	push	r30
     770:	ff 93       	push	r31
	// WE check the button state (high or low)so we can check whether it 's a long press or not
	BUTTON_read(2, PORT_D, *value);
     772:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <value>
     776:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <value+0x1>
     77a:	40 81       	ld	r20, Z
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	64 e4       	ldi	r22, 0x44	; 68
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	0e 94 16 04 	call	0x82c	; 0x82c <BUTTON_read>
	if(read_bit(PIND, 2) == HIGH)
     786:	82 9b       	sbis	0x10, 2	; 16
     788:	10 c0       	rjmp	.+32     	; 0x7aa <__vector_1+0x5a>
	{
		time_external = time_passed;
     78a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <time_passed>
     78e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <time_passed+0x1>
     792:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <time_passed+0x2>
     796:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <time_passed+0x3>
     79a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <time_external>
     79e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <time_external+0x1>
     7a2:	a0 93 70 00 	sts	0x0070, r26	; 0x800070 <time_external+0x2>
     7a6:	b0 93 71 00 	sts	0x0071, r27	; 0x800071 <time_external+0x3>
	
	}
	if(read_bit(PIND, 2) == LOW)
     7aa:	82 99       	sbic	0x10, 2	; 16
     7ac:	29 c0       	rjmp	.+82     	; 0x800 <__DATA_REGION_LENGTH__>
	{
		// If it's not a long press we enter this loop to modify the variables
		if((time_passed-time_external)< 1000)
     7ae:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_passed>
     7b2:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_passed+0x1>
     7b6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_passed+0x2>
     7ba:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_passed+0x3>
     7be:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <time_external>
     7c2:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <time_external+0x1>
     7c6:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <time_external+0x2>
     7ca:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <time_external+0x3>
     7ce:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__subsf3>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	4a e7       	ldi	r20, 0x7A	; 122
     7d8:	54 e4       	ldi	r21, 0x44	; 68
     7da:	0e 94 e7 06 	call	0xdce	; 0xdce <__cmpsf2>
     7de:	88 23       	and	r24, r24
     7e0:	7c f4       	brge	.+30     	; 0x800 <__DATA_REGION_LENGTH__>
		{
			if(button<1)
     7e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7e6:	81 11       	cpse	r24, r1
     7e8:	0b c0       	rjmp	.+22     	; 0x800 <__DATA_REGION_LENGTH__>
			{
				// In here we modify the button so we van move to the pedestrian's mode
				// Also we restart the time
				time_passed = 0;
     7ea:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <time_passed>
     7ee:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <time_passed+0x1>
     7f2:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <time_passed+0x2>
     7f6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <time_passed+0x3>
				button = 1;
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
	
		}
	}

}
     800:	ff 91       	pop	r31
     802:	ef 91       	pop	r30
     804:	bf 91       	pop	r27
     806:	af 91       	pop	r26
     808:	9f 91       	pop	r25
     80a:	8f 91       	pop	r24
     80c:	7f 91       	pop	r23
     80e:	6f 91       	pop	r22
     810:	5f 91       	pop	r21
     812:	4f 91       	pop	r20
     814:	3f 91       	pop	r19
     816:	2f 91       	pop	r18
     818:	0f 90       	pop	r0
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	0f 90       	pop	r0
     81e:	1f 90       	pop	r1
     820:	18 95       	reti

00000822 <BUTTON_init>:


DRIVER_ERROR_T BUTTON_init(uint8_t buttonPin, uint8_t buttonPort)
{
	// To initialize the button - always input(IN)
	DIO_init(buttonPin, buttonPort, IN);
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	0e 94 22 04 	call	0x844	; 0x844 <DIO_init>
	
	//ERROR STATE
	return DRIVER_OK;
}
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	08 95       	ret

0000082c <BUTTON_read>:

DRIVER_ERROR_T BUTTON_read(uint8_t buttonPin, uint8_t buttonPort, uint8_t *value)
{
	// to read the button state
	DIO_read(buttonPin, buttonPort, *value);
     82c:	fa 01       	movw	r30, r20
     82e:	40 81       	ld	r20, Z
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	0e 94 5a 05 	call	0xab4	; 0xab4 <DIO_read>
	
	//ERROR STATE
	return DRIVER_OK;
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	08 95       	ret

0000083a <main>:
/*#include "DIO Driver/dio.h"*/
#include "Application/application.h"

int main(void)
{
	APP_init();	
     83a:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>

    while (1) 
    {
		APP_start();
     83e:	0e 94 77 00 	call	0xee	; 0xee <APP_start>
     842:	fd cf       	rjmp	.-6      	; 0x83e <main+0x4>

00000844 <DIO_init>:
		//ERROR STATE
		return DRIVER_ERROR;
		break;
		
	}
}
     844:	62 34       	cpi	r22, 0x42	; 66
     846:	69 f1       	breq	.+90     	; 0x8a2 <__stack+0x43>
     848:	18 f4       	brcc	.+6      	; 0x850 <DIO_init+0xc>
     84a:	61 34       	cpi	r22, 0x41	; 65
     84c:	41 f0       	breq	.+16     	; 0x85e <DIO_init+0x1a>
     84e:	8d c0       	rjmp	.+282    	; 0x96a <__stack+0x10b>
     850:	63 34       	cpi	r22, 0x43	; 67
     852:	09 f4       	brne	.+2      	; 0x856 <DIO_init+0x12>
     854:	48 c0       	rjmp	.+144    	; 0x8e6 <__stack+0x87>
     856:	64 34       	cpi	r22, 0x44	; 68
     858:	09 f4       	brne	.+2      	; 0x85c <DIO_init+0x18>
     85a:	66 c0       	rjmp	.+204    	; 0x928 <__stack+0xc9>
     85c:	86 c0       	rjmp	.+268    	; 0x96a <__stack+0x10b>
     85e:	41 11       	cpse	r20, r1
     860:	0f c0       	rjmp	.+30     	; 0x880 <__stack+0x21>
     862:	4a b3       	in	r20, 0x1a	; 26
     864:	21 e0       	ldi	r18, 0x01	; 1
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	b9 01       	movw	r22, r18
     86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
     86c:	66 0f       	add	r22, r22
     86e:	77 1f       	adc	r23, r23
     870:	8a 95       	dec	r24
     872:	e2 f7       	brpl	.-8      	; 0x86c <__stack+0xd>
     874:	cb 01       	movw	r24, r22
     876:	80 95       	com	r24
     878:	84 23       	and	r24, r20
     87a:	8a bb       	out	0x1a, r24	; 26
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	08 95       	ret
     880:	41 30       	cpi	r20, 0x01	; 1
     882:	09 f0       	breq	.+2      	; 0x886 <__stack+0x27>
     884:	73 c0       	rjmp	.+230    	; 0x96c <__stack+0x10d>
     886:	4a b3       	in	r20, 0x1a	; 26
     888:	21 e0       	ldi	r18, 0x01	; 1
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	b9 01       	movw	r22, r18
     88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
     890:	66 0f       	add	r22, r22
     892:	77 1f       	adc	r23, r23
     894:	8a 95       	dec	r24
     896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
     898:	cb 01       	movw	r24, r22
     89a:	84 2b       	or	r24, r20
     89c:	8a bb       	out	0x1a, r24	; 26
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	08 95       	ret
     8a2:	41 11       	cpse	r20, r1
     8a4:	0f c0       	rjmp	.+30     	; 0x8c4 <__stack+0x65>
     8a6:	47 b3       	in	r20, 0x17	; 23
     8a8:	21 e0       	ldi	r18, 0x01	; 1
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	b9 01       	movw	r22, r18
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
     8b0:	66 0f       	add	r22, r22
     8b2:	77 1f       	adc	r23, r23
     8b4:	8a 95       	dec	r24
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__stack+0x51>
     8b8:	cb 01       	movw	r24, r22
     8ba:	80 95       	com	r24
     8bc:	84 23       	and	r24, r20
     8be:	87 bb       	out	0x17, r24	; 23
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	08 95       	ret
     8c4:	41 30       	cpi	r20, 0x01	; 1
     8c6:	09 f0       	breq	.+2      	; 0x8ca <__stack+0x6b>
     8c8:	53 c0       	rjmp	.+166    	; 0x970 <__stack+0x111>
     8ca:	47 b3       	in	r20, 0x17	; 23
     8cc:	21 e0       	ldi	r18, 0x01	; 1
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	b9 01       	movw	r22, r18
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <__stack+0x79>
     8d4:	66 0f       	add	r22, r22
     8d6:	77 1f       	adc	r23, r23
     8d8:	8a 95       	dec	r24
     8da:	e2 f7       	brpl	.-8      	; 0x8d4 <__stack+0x75>
     8dc:	cb 01       	movw	r24, r22
     8de:	84 2b       	or	r24, r20
     8e0:	87 bb       	out	0x17, r24	; 23
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	08 95       	ret
     8e6:	41 11       	cpse	r20, r1
     8e8:	0f c0       	rjmp	.+30     	; 0x908 <__stack+0xa9>
     8ea:	44 b3       	in	r20, 0x14	; 20
     8ec:	21 e0       	ldi	r18, 0x01	; 1
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	b9 01       	movw	r22, r18
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	66 0f       	add	r22, r22
     8f6:	77 1f       	adc	r23, r23
     8f8:	8a 95       	dec	r24
     8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <__stack+0x95>
     8fc:	cb 01       	movw	r24, r22
     8fe:	80 95       	com	r24
     900:	84 23       	and	r24, r20
     902:	84 bb       	out	0x14, r24	; 20
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	08 95       	ret
     908:	41 30       	cpi	r20, 0x01	; 1
     90a:	a1 f5       	brne	.+104    	; 0x974 <__stack+0x115>
     90c:	44 b3       	in	r20, 0x14	; 20
     90e:	21 e0       	ldi	r18, 0x01	; 1
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	b9 01       	movw	r22, r18
     914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0xbb>
     916:	66 0f       	add	r22, r22
     918:	77 1f       	adc	r23, r23
     91a:	8a 95       	dec	r24
     91c:	e2 f7       	brpl	.-8      	; 0x916 <__stack+0xb7>
     91e:	cb 01       	movw	r24, r22
     920:	84 2b       	or	r24, r20
     922:	84 bb       	out	0x14, r24	; 20
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 95       	ret
     928:	41 11       	cpse	r20, r1
     92a:	0f c0       	rjmp	.+30     	; 0x94a <__stack+0xeb>
     92c:	41 b3       	in	r20, 0x11	; 17
     92e:	21 e0       	ldi	r18, 0x01	; 1
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	b9 01       	movw	r22, r18
     934:	02 c0       	rjmp	.+4      	; 0x93a <__stack+0xdb>
     936:	66 0f       	add	r22, r22
     938:	77 1f       	adc	r23, r23
     93a:	8a 95       	dec	r24
     93c:	e2 f7       	brpl	.-8      	; 0x936 <__stack+0xd7>
     93e:	cb 01       	movw	r24, r22
     940:	80 95       	com	r24
     942:	84 23       	and	r24, r20
     944:	81 bb       	out	0x11, r24	; 17
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	08 95       	ret
     94a:	41 30       	cpi	r20, 0x01	; 1
     94c:	a9 f4       	brne	.+42     	; 0x978 <__stack+0x119>
     94e:	41 b3       	in	r20, 0x11	; 17
     950:	21 e0       	ldi	r18, 0x01	; 1
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	b9 01       	movw	r22, r18
     956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0xfd>
     958:	66 0f       	add	r22, r22
     95a:	77 1f       	adc	r23, r23
     95c:	8a 95       	dec	r24
     95e:	e2 f7       	brpl	.-8      	; 0x958 <__stack+0xf9>
     960:	cb 01       	movw	r24, r22
     962:	84 2b       	or	r24, r20
     964:	81 bb       	out	0x11, r24	; 17
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	08 95       	ret
     96a:	08 95       	ret
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	08 95       	ret
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	08 95       	ret
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	08 95       	ret
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	08 95       	ret

0000097c <DIO_write>:
     97c:	62 34       	cpi	r22, 0x42	; 66
     97e:	69 f1       	breq	.+90     	; 0x9da <DIO_write+0x5e>
     980:	18 f4       	brcc	.+6      	; 0x988 <DIO_write+0xc>
     982:	61 34       	cpi	r22, 0x41	; 65
     984:	41 f0       	breq	.+16     	; 0x996 <DIO_write+0x1a>
     986:	8d c0       	rjmp	.+282    	; 0xaa2 <DIO_write+0x126>
     988:	63 34       	cpi	r22, 0x43	; 67
     98a:	09 f4       	brne	.+2      	; 0x98e <DIO_write+0x12>
     98c:	48 c0       	rjmp	.+144    	; 0xa1e <DIO_write+0xa2>
     98e:	64 34       	cpi	r22, 0x44	; 68
     990:	09 f4       	brne	.+2      	; 0x994 <DIO_write+0x18>
     992:	66 c0       	rjmp	.+204    	; 0xa60 <DIO_write+0xe4>
     994:	86 c0       	rjmp	.+268    	; 0xaa2 <DIO_write+0x126>
     996:	41 11       	cpse	r20, r1
     998:	0f c0       	rjmp	.+30     	; 0x9b8 <DIO_write+0x3c>
     99a:	4b b3       	in	r20, 0x1b	; 27
     99c:	21 e0       	ldi	r18, 0x01	; 1
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	b9 01       	movw	r22, r18
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <DIO_write+0x2c>
     9a4:	66 0f       	add	r22, r22
     9a6:	77 1f       	adc	r23, r23
     9a8:	8a 95       	dec	r24
     9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <DIO_write+0x28>
     9ac:	cb 01       	movw	r24, r22
     9ae:	80 95       	com	r24
     9b0:	84 23       	and	r24, r20
     9b2:	8b bb       	out	0x1b, r24	; 27
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	08 95       	ret
     9b8:	41 30       	cpi	r20, 0x01	; 1
     9ba:	09 f0       	breq	.+2      	; 0x9be <DIO_write+0x42>
     9bc:	73 c0       	rjmp	.+230    	; 0xaa4 <DIO_write+0x128>
     9be:	4b b3       	in	r20, 0x1b	; 27
     9c0:	21 e0       	ldi	r18, 0x01	; 1
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	b9 01       	movw	r22, r18
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <DIO_write+0x50>
     9c8:	66 0f       	add	r22, r22
     9ca:	77 1f       	adc	r23, r23
     9cc:	8a 95       	dec	r24
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <DIO_write+0x4c>
     9d0:	cb 01       	movw	r24, r22
     9d2:	84 2b       	or	r24, r20
     9d4:	8b bb       	out	0x1b, r24	; 27
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	08 95       	ret
     9da:	41 11       	cpse	r20, r1
     9dc:	0f c0       	rjmp	.+30     	; 0x9fc <DIO_write+0x80>
     9de:	48 b3       	in	r20, 0x18	; 24
     9e0:	21 e0       	ldi	r18, 0x01	; 1
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	b9 01       	movw	r22, r18
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <DIO_write+0x70>
     9e8:	66 0f       	add	r22, r22
     9ea:	77 1f       	adc	r23, r23
     9ec:	8a 95       	dec	r24
     9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <DIO_write+0x6c>
     9f0:	cb 01       	movw	r24, r22
     9f2:	80 95       	com	r24
     9f4:	84 23       	and	r24, r20
     9f6:	88 bb       	out	0x18, r24	; 24
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	08 95       	ret
     9fc:	41 30       	cpi	r20, 0x01	; 1
     9fe:	09 f0       	breq	.+2      	; 0xa02 <DIO_write+0x86>
     a00:	53 c0       	rjmp	.+166    	; 0xaa8 <DIO_write+0x12c>
     a02:	48 b3       	in	r20, 0x18	; 24
     a04:	21 e0       	ldi	r18, 0x01	; 1
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	b9 01       	movw	r22, r18
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <DIO_write+0x94>
     a0c:	66 0f       	add	r22, r22
     a0e:	77 1f       	adc	r23, r23
     a10:	8a 95       	dec	r24
     a12:	e2 f7       	brpl	.-8      	; 0xa0c <DIO_write+0x90>
     a14:	cb 01       	movw	r24, r22
     a16:	84 2b       	or	r24, r20
     a18:	88 bb       	out	0x18, r24	; 24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	08 95       	ret
     a1e:	41 11       	cpse	r20, r1
     a20:	0f c0       	rjmp	.+30     	; 0xa40 <DIO_write+0xc4>
     a22:	45 b3       	in	r20, 0x15	; 21
     a24:	21 e0       	ldi	r18, 0x01	; 1
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	b9 01       	movw	r22, r18
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <DIO_write+0xb4>
     a2c:	66 0f       	add	r22, r22
     a2e:	77 1f       	adc	r23, r23
     a30:	8a 95       	dec	r24
     a32:	e2 f7       	brpl	.-8      	; 0xa2c <DIO_write+0xb0>
     a34:	cb 01       	movw	r24, r22
     a36:	80 95       	com	r24
     a38:	84 23       	and	r24, r20
     a3a:	85 bb       	out	0x15, r24	; 21
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	08 95       	ret
     a40:	41 30       	cpi	r20, 0x01	; 1
     a42:	a1 f5       	brne	.+104    	; 0xaac <DIO_write+0x130>
     a44:	45 b3       	in	r20, 0x15	; 21
     a46:	21 e0       	ldi	r18, 0x01	; 1
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	b9 01       	movw	r22, r18
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <DIO_write+0xd6>
     a4e:	66 0f       	add	r22, r22
     a50:	77 1f       	adc	r23, r23
     a52:	8a 95       	dec	r24
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <DIO_write+0xd2>
     a56:	cb 01       	movw	r24, r22
     a58:	84 2b       	or	r24, r20
     a5a:	85 bb       	out	0x15, r24	; 21
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	08 95       	ret
     a60:	41 11       	cpse	r20, r1
     a62:	0f c0       	rjmp	.+30     	; 0xa82 <DIO_write+0x106>
     a64:	42 b3       	in	r20, 0x12	; 18
     a66:	21 e0       	ldi	r18, 0x01	; 1
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	b9 01       	movw	r22, r18
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <DIO_write+0xf6>
     a6e:	66 0f       	add	r22, r22
     a70:	77 1f       	adc	r23, r23
     a72:	8a 95       	dec	r24
     a74:	e2 f7       	brpl	.-8      	; 0xa6e <DIO_write+0xf2>
     a76:	cb 01       	movw	r24, r22
     a78:	80 95       	com	r24
     a7a:	84 23       	and	r24, r20
     a7c:	82 bb       	out	0x12, r24	; 18
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	08 95       	ret
     a82:	41 30       	cpi	r20, 0x01	; 1
     a84:	a9 f4       	brne	.+42     	; 0xab0 <DIO_write+0x134>
     a86:	42 b3       	in	r20, 0x12	; 18
     a88:	21 e0       	ldi	r18, 0x01	; 1
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	b9 01       	movw	r22, r18
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <DIO_write+0x118>
     a90:	66 0f       	add	r22, r22
     a92:	77 1f       	adc	r23, r23
     a94:	8a 95       	dec	r24
     a96:	e2 f7       	brpl	.-8      	; 0xa90 <DIO_write+0x114>
     a98:	cb 01       	movw	r24, r22
     a9a:	84 2b       	or	r24, r20
     a9c:	82 bb       	out	0x12, r24	; 18
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	08 95       	ret
     aa2:	08 95       	ret
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	08 95       	ret
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	08 95       	ret
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	08 95       	ret
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	08 95       	ret

00000ab4 <DIO_read>:

DRIVER_ERROR_T DIO_read(uint8_t pinNumber, uint8_t portNumber, uint8_t *value)
{
	switch(portNumber)
     ab4:	62 34       	cpi	r22, 0x42	; 66
     ab6:	b9 f0       	breq	.+46     	; 0xae6 <DIO_read+0x32>
     ab8:	18 f4       	brcc	.+6      	; 0xac0 <DIO_read+0xc>
     aba:	61 34       	cpi	r22, 0x41	; 65
     abc:	31 f0       	breq	.+12     	; 0xaca <DIO_read+0x16>
     abe:	3d c0       	rjmp	.+122    	; 0xb3a <DIO_read+0x86>
     ac0:	63 34       	cpi	r22, 0x43	; 67
     ac2:	f9 f0       	breq	.+62     	; 0xb02 <DIO_read+0x4e>
     ac4:	64 34       	cpi	r22, 0x44	; 68
     ac6:	59 f1       	breq	.+86     	; 0xb1e <DIO_read+0x6a>
     ac8:	38 c0       	rjmp	.+112    	; 0xb3a <DIO_read+0x86>
	{
		case PORT_A:
		// to read the state of a specific pin on PortA
			//*value= (PINA & (1<<pinNumber))>>pinNumber; 
			*value= read_bit(PINA, pinNumber); // get state -> read bit
     aca:	29 b3       	in	r18, 0x19	; 25
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	b9 01       	movw	r22, r18
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <DIO_read+0x22>
     ad2:	75 95       	asr	r23
     ad4:	67 95       	ror	r22
     ad6:	8a 95       	dec	r24
     ad8:	e2 f7       	brpl	.-8      	; 0xad2 <DIO_read+0x1e>
     ada:	cb 01       	movw	r24, r22
     adc:	81 70       	andi	r24, 0x01	; 1
     ade:	fa 01       	movw	r30, r20
     ae0:	80 83       	st	Z, r24
			//ERROR STATE
			return DRIVER_OK;
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	08 95       	ret
		break;
		case PORT_B:
		// to read the state of a specific pin on PortB
			//*value=(PINB & (1<<pinNumber))>>pinNumber;
			*value= read_bit(PINB, pinNumber); // get state -> read bit
     ae6:	26 b3       	in	r18, 0x16	; 22
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	b9 01       	movw	r22, r18
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <DIO_read+0x3e>
     aee:	75 95       	asr	r23
     af0:	67 95       	ror	r22
     af2:	8a 95       	dec	r24
     af4:	e2 f7       	brpl	.-8      	; 0xaee <DIO_read+0x3a>
     af6:	cb 01       	movw	r24, r22
     af8:	81 70       	andi	r24, 0x01	; 1
     afa:	fa 01       	movw	r30, r20
     afc:	80 83       	st	Z, r24
			//ERROR STATE
			return DRIVER_OK;
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	08 95       	ret
		break;
		case PORT_C:
		// to read the state of a specific pin on PortC
			//*value=(PINC & (1<<pinNumber))>>pinNumber;
			*value= read_bit(PINC, pinNumber); // get state -> read bit
     b02:	23 b3       	in	r18, 0x13	; 19
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	b9 01       	movw	r22, r18
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <DIO_read+0x5a>
     b0a:	75 95       	asr	r23
     b0c:	67 95       	ror	r22
     b0e:	8a 95       	dec	r24
     b10:	e2 f7       	brpl	.-8      	; 0xb0a <DIO_read+0x56>
     b12:	cb 01       	movw	r24, r22
     b14:	81 70       	andi	r24, 0x01	; 1
     b16:	fa 01       	movw	r30, r20
     b18:	80 83       	st	Z, r24
			//ERROR STATE
			return DRIVER_OK;
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	08 95       	ret
		break;
		case PORT_D:
		// to read the state of a specific pin on PortD
			//*value=(PIND & (1<<pinNumber))>>pinNumber;
			*value= read_bit(PIND, pinNumber); // get state -> read bit
     b1e:	20 b3       	in	r18, 0x10	; 16
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	b9 01       	movw	r22, r18
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <DIO_read+0x76>
     b26:	75 95       	asr	r23
     b28:	67 95       	ror	r22
     b2a:	8a 95       	dec	r24
     b2c:	e2 f7       	brpl	.-8      	; 0xb26 <DIO_read+0x72>
     b2e:	cb 01       	movw	r24, r22
     b30:	81 70       	andi	r24, 0x01	; 1
     b32:	fa 01       	movw	r30, r20
     b34:	80 83       	st	Z, r24
			//ERROR STATE
			return DRIVER_OK;
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	08 95       	ret
			break;
		default:
			//ERROR STATE
			return DRIVER_ERROR;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
}
     b3c:	08 95       	ret

00000b3e <LED_init>:
 */ 
#include "led.h"


DRIVER_ERROR_T LED_init(uint8_t ledPin, uint8_t ledPort) // output
{
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	c8 2f       	mov	r28, r24
     b44:	d6 2f       	mov	r29, r22
	//Initiate the lED which is always OUTPUT (OUT)
	DIO_init(ledPin, ledPort, OUT);
     b46:	41 e0       	ldi	r20, 0x01	; 1
     b48:	0e 94 22 04 	call	0x844	; 0x844 <DIO_init>
	DIO_write(ledPin,ledPort, LOW);
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	6d 2f       	mov	r22, r29
     b50:	8c 2f       	mov	r24, r28
     b52:	0e 94 be 04 	call	0x97c	; 0x97c <DIO_write>
	
	//ERROR STATE
	return DRIVER_OK;
}
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <LED_on>:


DRIVER_ERROR_T LED_on(uint8_t ledPin, uint8_t ledPort)
{
	// to turn on the led we write HIGH
	DIO_write(ledPin, ledPort, HIGH);
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	0e 94 be 04 	call	0x97c	; 0x97c <DIO_write>
	
	//ERROR STATE
	return DRIVER_OK;
}
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	08 95       	ret

00000b68 <LED_off>:

DRIVER_ERROR_T LED_off(uint8_t ledPin, uint8_t ledPort)
{
	// to turn off the led we write LOW
	DIO_write(ledPin,ledPort, LOW);
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	0e 94 be 04 	call	0x97c	; 0x97c <DIO_write>
	
	//ERROR STATE
	return DRIVER_OK;
}
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	08 95       	ret

00000b72 <enable_globalInterrupt>:
{
	// Disable interrupt by writing 0 in bit I
	clear_bit(SREG, I);
	//ERROR STATE
	return INTERRUPT_OK;
}
     b72:	8f b7       	in	r24, 0x3f	; 63
     b74:	80 68       	ori	r24, 0x80	; 128
     b76:	8f bf       	out	0x3f, r24	; 63
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	08 95       	ret

00000b7c <extEnable_pin>:

INTERRUPT_ERROR_T extEnable_pin(EXT_t interruptNumber, MODE_t interruptMode)
{
	switch(interruptNumber)
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	51 f1       	breq	.+84     	; 0xbd4 <extEnable_pin+0x58>
     b80:	20 f0       	brcs	.+8      	; 0xb8a <extEnable_pin+0xe>
     b82:	82 30       	cpi	r24, 0x02	; 2
     b84:	09 f4       	brne	.+2      	; 0xb88 <extEnable_pin+0xc>
     b86:	4b c0       	rjmp	.+150    	; 0xc1e <extEnable_pin+0xa2>
     b88:	59 c0       	rjmp	.+178    	; 0xc3c <extEnable_pin+0xc0>
	{
		// TO choose Interrupt mode
		case INT_0:
		if(interruptMode == LOW_LEVEL) // choose level mode
     b8a:	61 11       	cpse	r22, r1
     b8c:	06 c0       	rjmp	.+12     	; 0xb9a <extEnable_pin+0x1e>
		{
			// Write 0 in MCUCR in bit ISC00
			clear_bit(MCUCR, ISC00);
     b8e:	85 b7       	in	r24, 0x35	; 53
     b90:	8e 7f       	andi	r24, 0xFE	; 254
     b92:	85 bf       	out	0x35, r24	; 53
			// Write 0 in MCUCR in bit ISC01
			clear_bit(MCUCR, ISC01);
     b94:	85 b7       	in	r24, 0x35	; 53
     b96:	8d 7f       	andi	r24, 0xFD	; 253
     b98:	85 bf       	out	0x35, r24	; 53
		}
		if(interruptMode == PIN_CHANGE) // choose level mode
     b9a:	61 30       	cpi	r22, 0x01	; 1
     b9c:	31 f4       	brne	.+12     	; 0xbaa <extEnable_pin+0x2e>
		{
			// Write 1 in MCUCR in bit ISC00
			set_bit(MCUCR, ISC00);
     b9e:	85 b7       	in	r24, 0x35	; 53
     ba0:	81 60       	ori	r24, 0x01	; 1
     ba2:	85 bf       	out	0x35, r24	; 53
			// Write 0 in MCUCR in bit ISC01
			clear_bit(MCUCR, ISC01);
     ba4:	85 b7       	in	r24, 0x35	; 53
     ba6:	8d 7f       	andi	r24, 0xFD	; 253
     ba8:	85 bf       	out	0x35, r24	; 53
		}
		if(interruptMode == FALLING) // choose level mode
     baa:	62 30       	cpi	r22, 0x02	; 2
     bac:	31 f4       	brne	.+12     	; 0xbba <extEnable_pin+0x3e>
		{
			// Write 0 in MCUCR in bit ISC00
			clear_bit(MCUCR, ISC00);
     bae:	85 b7       	in	r24, 0x35	; 53
     bb0:	8e 7f       	andi	r24, 0xFE	; 254
     bb2:	85 bf       	out	0x35, r24	; 53
			// Write 1 in MCUCR in bit ISC01
			set_bit(MCUCR, ISC01);
     bb4:	85 b7       	in	r24, 0x35	; 53
     bb6:	82 60       	ori	r24, 0x02	; 2
     bb8:	85 bf       	out	0x35, r24	; 53
		}
		if(interruptMode == RISING) // choose level mode
     bba:	63 30       	cpi	r22, 0x03	; 3
     bbc:	31 f4       	brne	.+12     	; 0xbca <extEnable_pin+0x4e>
		{
			// Write 1 in MCUCR in bit ISC00
			set_bit(MCUCR, ISC00);
     bbe:	85 b7       	in	r24, 0x35	; 53
     bc0:	81 60       	ori	r24, 0x01	; 1
     bc2:	85 bf       	out	0x35, r24	; 53
			// Write 1 in MCUCR in bit ISC01
			set_bit(MCUCR, ISC01);
     bc4:	85 b7       	in	r24, 0x35	; 53
     bc6:	82 60       	ori	r24, 0x02	; 2
     bc8:	85 bf       	out	0x35, r24	; 53
		}
		
		// to enable INT0
		set_bit(GICR, INT0);
     bca:	8b b7       	in	r24, 0x3b	; 59
     bcc:	80 64       	ori	r24, 0x40	; 64
     bce:	8b bf       	out	0x3b, r24	; 59
		
		//ERROR STATE
		return INTERRUPT_OK;
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	08 95       	ret
		break;
		
		// TO choose Interrupt mode
		case INT_1:
		if(interruptMode == LOW_LEVEL) // to choose level mode
     bd4:	61 11       	cpse	r22, r1
     bd6:	06 c0       	rjmp	.+12     	; 0xbe4 <extEnable_pin+0x68>
		{
			// Write 0 in MCUCR in bit ISC10
			clear_bit(MCUCR, ISC10);
     bd8:	85 b7       	in	r24, 0x35	; 53
     bda:	8b 7f       	andi	r24, 0xFB	; 251
     bdc:	85 bf       	out	0x35, r24	; 53
			// Write 0 in MCUCR in bit ISC11
			clear_bit(MCUCR, ISC11);
     bde:	85 b7       	in	r24, 0x35	; 53
     be0:	87 7f       	andi	r24, 0xF7	; 247
     be2:	85 bf       	out	0x35, r24	; 53
		}
		if(interruptMode == PIN_CHANGE) // to choose level mode
     be4:	61 30       	cpi	r22, 0x01	; 1
     be6:	31 f4       	brne	.+12     	; 0xbf4 <extEnable_pin+0x78>
		{
			// Write 1 in MCUCR in bit ISC10
			set_bit(MCUCR, ISC10);
     be8:	85 b7       	in	r24, 0x35	; 53
     bea:	84 60       	ori	r24, 0x04	; 4
     bec:	85 bf       	out	0x35, r24	; 53
			// Write 0 in MCUCR in bit ISC11
			clear_bit(MCUCR, ISC11);
     bee:	85 b7       	in	r24, 0x35	; 53
     bf0:	87 7f       	andi	r24, 0xF7	; 247
     bf2:	85 bf       	out	0x35, r24	; 53
		}
		if(interruptMode == FALLING) // to choose level mode
     bf4:	62 30       	cpi	r22, 0x02	; 2
     bf6:	31 f4       	brne	.+12     	; 0xc04 <extEnable_pin+0x88>
		{
			// Write 0 in MCUCR in bit ISC10
			clear_bit(MCUCR, ISC10);
     bf8:	85 b7       	in	r24, 0x35	; 53
     bfa:	8b 7f       	andi	r24, 0xFB	; 251
     bfc:	85 bf       	out	0x35, r24	; 53
			// Write 0 in MCUCR in bit ISC11
			set_bit(MCUCR, ISC11);
     bfe:	85 b7       	in	r24, 0x35	; 53
     c00:	88 60       	ori	r24, 0x08	; 8
     c02:	85 bf       	out	0x35, r24	; 53
		}
		if(interruptMode == RISING) // to choose level mode
     c04:	63 30       	cpi	r22, 0x03	; 3
     c06:	31 f4       	brne	.+12     	; 0xc14 <extEnable_pin+0x98>
		{
			// Write 1 in MCUCR in bit ISC10
			set_bit(MCUCR, ISC10);
     c08:	85 b7       	in	r24, 0x35	; 53
     c0a:	84 60       	ori	r24, 0x04	; 4
     c0c:	85 bf       	out	0x35, r24	; 53
			// Write 1 in MCUCR in bit ISC11
			set_bit(MCUCR, ISC11);
     c0e:	85 b7       	in	r24, 0x35	; 53
     c10:	88 60       	ori	r24, 0x08	; 8
     c12:	85 bf       	out	0x35, r24	; 53
		}
		
		// To enable INT1
		set_bit(GICR, INT1);
     c14:	8b b7       	in	r24, 0x3b	; 59
     c16:	80 68       	ori	r24, 0x80	; 128
     c18:	8b bf       	out	0x3b, r24	; 59
		
		//ERROR STATE
		return INTERRUPT_OK;
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	08 95       	ret
		break;
		
		// To choose interrupt level
		case INT_2:
		if(interruptMode == FALLING) // to choose level mode
     c1e:	62 30       	cpi	r22, 0x02	; 2
     c20:	19 f4       	brne	.+6      	; 0xc28 <extEnable_pin+0xac>
		{
			// Write 0 in MCUCR in bit ISC2
			clear_bit(MCUCSR, ISC2);
     c22:	84 b7       	in	r24, 0x34	; 52
     c24:	8f 7b       	andi	r24, 0xBF	; 191
     c26:	84 bf       	out	0x34, r24	; 52
		}
		if(interruptMode == RISING) // to choose level mode
     c28:	63 30       	cpi	r22, 0x03	; 3
     c2a:	19 f4       	brne	.+6      	; 0xc32 <extEnable_pin+0xb6>
		{
			// Write 1 in MCUCR in bit ISC2
			set_bit(MCUCSR, ISC2);
     c2c:	84 b7       	in	r24, 0x34	; 52
     c2e:	80 64       	ori	r24, 0x40	; 64
     c30:	84 bf       	out	0x34, r24	; 52
		}
		
		// TO enable INT2
		set_bit(GICR, INT2);
     c32:	8b b7       	in	r24, 0x3b	; 59
     c34:	80 62       	ori	r24, 0x20	; 32
     c36:	8b bf       	out	0x3b, r24	; 59
		
		//ERROR STATE
		return INTERRUPT_OK;
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	08 95       	ret
		break;
		default:
		//ERROR STATE
		return INTERRUPT_ERROR;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
     c3e:	08 95       	ret

00000c40 <timer0_init>:
	}
	
	overFlowCounter=0;
	//ERROR STATE
	return TIMER_OK;
}
     c40:	23 b7       	in	r18, 0x33	; 51
     c42:	27 7f       	andi	r18, 0xF7	; 247
     c44:	23 bf       	out	0x33, r18	; 51
     c46:	23 b7       	in	r18, 0x33	; 51
     c48:	2f 7b       	andi	r18, 0xBF	; 191
     c4a:	23 bf       	out	0x33, r18	; 51
     c4c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Pre_Scaler+0x1>
     c50:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Pre_Scaler>
     c54:	80 34       	cpi	r24, 0x40	; 64
     c56:	91 05       	cpc	r25, r1
     c58:	29 f1       	breq	.+74     	; 0xca4 <timer0_init+0x64>
     c5a:	30 f4       	brcc	.+12     	; 0xc68 <timer0_init+0x28>
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f0       	breq	.+22     	; 0xc78 <timer0_init+0x38>
     c62:	08 97       	sbiw	r24, 0x08	; 8
     c64:	a1 f0       	breq	.+40     	; 0xc8e <timer0_init+0x4e>
     c66:	3f c0       	rjmp	.+126    	; 0xce6 <timer0_init+0xa6>
     c68:	81 15       	cp	r24, r1
     c6a:	21 e0       	ldi	r18, 0x01	; 1
     c6c:	92 07       	cpc	r25, r18
     c6e:	29 f1       	breq	.+74     	; 0xcba <timer0_init+0x7a>
     c70:	81 15       	cp	r24, r1
     c72:	94 40       	sbci	r25, 0x04	; 4
     c74:	69 f1       	breq	.+90     	; 0xcd0 <timer0_init+0x90>
     c76:	37 c0       	rjmp	.+110    	; 0xce6 <timer0_init+0xa6>
     c78:	83 b7       	in	r24, 0x33	; 51
     c7a:	81 60       	ori	r24, 0x01	; 1
     c7c:	83 bf       	out	0x33, r24	; 51
     c7e:	83 b7       	in	r24, 0x33	; 51
     c80:	8d 7f       	andi	r24, 0xFD	; 253
     c82:	83 bf       	out	0x33, r24	; 51
     c84:	83 b7       	in	r24, 0x33	; 51
     c86:	8b 7f       	andi	r24, 0xFB	; 251
     c88:	83 bf       	out	0x33, r24	; 51
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	08 95       	ret
     c8e:	83 b7       	in	r24, 0x33	; 51
     c90:	8e 7f       	andi	r24, 0xFE	; 254
     c92:	83 bf       	out	0x33, r24	; 51
     c94:	83 b7       	in	r24, 0x33	; 51
     c96:	82 60       	ori	r24, 0x02	; 2
     c98:	83 bf       	out	0x33, r24	; 51
     c9a:	83 b7       	in	r24, 0x33	; 51
     c9c:	8b 7f       	andi	r24, 0xFB	; 251
     c9e:	83 bf       	out	0x33, r24	; 51
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	08 95       	ret
     ca4:	83 b7       	in	r24, 0x33	; 51
     ca6:	81 60       	ori	r24, 0x01	; 1
     ca8:	83 bf       	out	0x33, r24	; 51
     caa:	83 b7       	in	r24, 0x33	; 51
     cac:	82 60       	ori	r24, 0x02	; 2
     cae:	83 bf       	out	0x33, r24	; 51
     cb0:	83 b7       	in	r24, 0x33	; 51
     cb2:	8b 7f       	andi	r24, 0xFB	; 251
     cb4:	83 bf       	out	0x33, r24	; 51
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	08 95       	ret
     cba:	83 b7       	in	r24, 0x33	; 51
     cbc:	8e 7f       	andi	r24, 0xFE	; 254
     cbe:	83 bf       	out	0x33, r24	; 51
     cc0:	83 b7       	in	r24, 0x33	; 51
     cc2:	8d 7f       	andi	r24, 0xFD	; 253
     cc4:	83 bf       	out	0x33, r24	; 51
     cc6:	83 b7       	in	r24, 0x33	; 51
     cc8:	84 60       	ori	r24, 0x04	; 4
     cca:	83 bf       	out	0x33, r24	; 51
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	08 95       	ret
     cd0:	83 b7       	in	r24, 0x33	; 51
     cd2:	81 60       	ori	r24, 0x01	; 1
     cd4:	83 bf       	out	0x33, r24	; 51
     cd6:	83 b7       	in	r24, 0x33	; 51
     cd8:	8d 7f       	andi	r24, 0xFD	; 253
     cda:	83 bf       	out	0x33, r24	; 51
     cdc:	83 b7       	in	r24, 0x33	; 51
     cde:	84 60       	ori	r24, 0x04	; 4
     ce0:	83 bf       	out	0x33, r24	; 51
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	08 95       	ret
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	08 95       	ret

00000cea <timer0_enableInterrupt>:
TIMER_ERROR_T timer0_enableInterrupt(void)
{
	// to enable overflow interrupt
	TIMSK |= (1<<TOIE0);
     cea:	89 b7       	in	r24, 0x39	; 57
     cec:	81 60       	ori	r24, 0x01	; 1
     cee:	89 bf       	out	0x39, r24	; 57
	
	//ERROR STATE
	return TIMER_OK;
}
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	08 95       	ret

00000cf4 <__subsf3>:
     cf4:	50 58       	subi	r21, 0x80	; 128

00000cf6 <__addsf3>:
     cf6:	bb 27       	eor	r27, r27
     cf8:	aa 27       	eor	r26, r26
     cfa:	0e 94 92 06 	call	0xd24	; 0xd24 <__addsf3x>
     cfe:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__fp_round>
     d02:	0e 94 c1 07 	call	0xf82	; 0xf82 <__fp_pscA>
     d06:	38 f0       	brcs	.+14     	; 0xd16 <__addsf3+0x20>
     d08:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fp_pscB>
     d0c:	20 f0       	brcs	.+8      	; 0xd16 <__addsf3+0x20>
     d0e:	39 f4       	brne	.+14     	; 0xd1e <__addsf3+0x28>
     d10:	9f 3f       	cpi	r25, 0xFF	; 255
     d12:	19 f4       	brne	.+6      	; 0xd1a <__addsf3+0x24>
     d14:	26 f4       	brtc	.+8      	; 0xd1e <__addsf3+0x28>
     d16:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_nan>
     d1a:	0e f4       	brtc	.+2      	; 0xd1e <__addsf3+0x28>
     d1c:	e0 95       	com	r30
     d1e:	e7 fb       	bst	r30, 7
     d20:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_inf>

00000d24 <__addsf3x>:
     d24:	e9 2f       	mov	r30, r25
     d26:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__fp_split3>
     d2a:	58 f3       	brcs	.-42     	; 0xd02 <__addsf3+0xc>
     d2c:	ba 17       	cp	r27, r26
     d2e:	62 07       	cpc	r22, r18
     d30:	73 07       	cpc	r23, r19
     d32:	84 07       	cpc	r24, r20
     d34:	95 07       	cpc	r25, r21
     d36:	20 f0       	brcs	.+8      	; 0xd40 <__addsf3x+0x1c>
     d38:	79 f4       	brne	.+30     	; 0xd58 <__addsf3x+0x34>
     d3a:	a6 f5       	brtc	.+104    	; 0xda4 <__addsf3x+0x80>
     d3c:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__fp_zero>
     d40:	0e f4       	brtc	.+2      	; 0xd44 <__addsf3x+0x20>
     d42:	e0 95       	com	r30
     d44:	0b 2e       	mov	r0, r27
     d46:	ba 2f       	mov	r27, r26
     d48:	a0 2d       	mov	r26, r0
     d4a:	0b 01       	movw	r0, r22
     d4c:	b9 01       	movw	r22, r18
     d4e:	90 01       	movw	r18, r0
     d50:	0c 01       	movw	r0, r24
     d52:	ca 01       	movw	r24, r20
     d54:	a0 01       	movw	r20, r0
     d56:	11 24       	eor	r1, r1
     d58:	ff 27       	eor	r31, r31
     d5a:	59 1b       	sub	r21, r25
     d5c:	99 f0       	breq	.+38     	; 0xd84 <__addsf3x+0x60>
     d5e:	59 3f       	cpi	r21, 0xF9	; 249
     d60:	50 f4       	brcc	.+20     	; 0xd76 <__addsf3x+0x52>
     d62:	50 3e       	cpi	r21, 0xE0	; 224
     d64:	68 f1       	brcs	.+90     	; 0xdc0 <__addsf3x+0x9c>
     d66:	1a 16       	cp	r1, r26
     d68:	f0 40       	sbci	r31, 0x00	; 0
     d6a:	a2 2f       	mov	r26, r18
     d6c:	23 2f       	mov	r18, r19
     d6e:	34 2f       	mov	r19, r20
     d70:	44 27       	eor	r20, r20
     d72:	58 5f       	subi	r21, 0xF8	; 248
     d74:	f3 cf       	rjmp	.-26     	; 0xd5c <__addsf3x+0x38>
     d76:	46 95       	lsr	r20
     d78:	37 95       	ror	r19
     d7a:	27 95       	ror	r18
     d7c:	a7 95       	ror	r26
     d7e:	f0 40       	sbci	r31, 0x00	; 0
     d80:	53 95       	inc	r21
     d82:	c9 f7       	brne	.-14     	; 0xd76 <__addsf3x+0x52>
     d84:	7e f4       	brtc	.+30     	; 0xda4 <__addsf3x+0x80>
     d86:	1f 16       	cp	r1, r31
     d88:	ba 0b       	sbc	r27, r26
     d8a:	62 0b       	sbc	r22, r18
     d8c:	73 0b       	sbc	r23, r19
     d8e:	84 0b       	sbc	r24, r20
     d90:	ba f0       	brmi	.+46     	; 0xdc0 <__addsf3x+0x9c>
     d92:	91 50       	subi	r25, 0x01	; 1
     d94:	a1 f0       	breq	.+40     	; 0xdbe <__addsf3x+0x9a>
     d96:	ff 0f       	add	r31, r31
     d98:	bb 1f       	adc	r27, r27
     d9a:	66 1f       	adc	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	88 1f       	adc	r24, r24
     da0:	c2 f7       	brpl	.-16     	; 0xd92 <__addsf3x+0x6e>
     da2:	0e c0       	rjmp	.+28     	; 0xdc0 <__addsf3x+0x9c>
     da4:	ba 0f       	add	r27, r26
     da6:	62 1f       	adc	r22, r18
     da8:	73 1f       	adc	r23, r19
     daa:	84 1f       	adc	r24, r20
     dac:	48 f4       	brcc	.+18     	; 0xdc0 <__addsf3x+0x9c>
     dae:	87 95       	ror	r24
     db0:	77 95       	ror	r23
     db2:	67 95       	ror	r22
     db4:	b7 95       	ror	r27
     db6:	f7 95       	ror	r31
     db8:	9e 3f       	cpi	r25, 0xFE	; 254
     dba:	08 f0       	brcs	.+2      	; 0xdbe <__addsf3x+0x9a>
     dbc:	b0 cf       	rjmp	.-160    	; 0xd1e <__addsf3+0x28>
     dbe:	93 95       	inc	r25
     dc0:	88 0f       	add	r24, r24
     dc2:	08 f0       	brcs	.+2      	; 0xdc6 <__addsf3x+0xa2>
     dc4:	99 27       	eor	r25, r25
     dc6:	ee 0f       	add	r30, r30
     dc8:	97 95       	ror	r25
     dca:	87 95       	ror	r24
     dcc:	08 95       	ret

00000dce <__cmpsf2>:
     dce:	0e 94 94 07 	call	0xf28	; 0xf28 <__fp_cmp>
     dd2:	08 f4       	brcc	.+2      	; 0xdd6 <__cmpsf2+0x8>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	08 95       	ret

00000dd8 <__divsf3>:
     dd8:	0e 94 00 07 	call	0xe00	; 0xe00 <__divsf3x>
     ddc:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__fp_round>
     de0:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fp_pscB>
     de4:	58 f0       	brcs	.+22     	; 0xdfc <__divsf3+0x24>
     de6:	0e 94 c1 07 	call	0xf82	; 0xf82 <__fp_pscA>
     dea:	40 f0       	brcs	.+16     	; 0xdfc <__divsf3+0x24>
     dec:	29 f4       	brne	.+10     	; 0xdf8 <__divsf3+0x20>
     dee:	5f 3f       	cpi	r21, 0xFF	; 255
     df0:	29 f0       	breq	.+10     	; 0xdfc <__divsf3+0x24>
     df2:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_inf>
     df6:	51 11       	cpse	r21, r1
     df8:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__fp_szero>
     dfc:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_nan>

00000e00 <__divsf3x>:
     e00:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__fp_split3>
     e04:	68 f3       	brcs	.-38     	; 0xde0 <__divsf3+0x8>

00000e06 <__divsf3_pse>:
     e06:	99 23       	and	r25, r25
     e08:	b1 f3       	breq	.-20     	; 0xdf6 <__divsf3+0x1e>
     e0a:	55 23       	and	r21, r21
     e0c:	91 f3       	breq	.-28     	; 0xdf2 <__divsf3+0x1a>
     e0e:	95 1b       	sub	r25, r21
     e10:	55 0b       	sbc	r21, r21
     e12:	bb 27       	eor	r27, r27
     e14:	aa 27       	eor	r26, r26
     e16:	62 17       	cp	r22, r18
     e18:	73 07       	cpc	r23, r19
     e1a:	84 07       	cpc	r24, r20
     e1c:	38 f0       	brcs	.+14     	; 0xe2c <__divsf3_pse+0x26>
     e1e:	9f 5f       	subi	r25, 0xFF	; 255
     e20:	5f 4f       	sbci	r21, 0xFF	; 255
     e22:	22 0f       	add	r18, r18
     e24:	33 1f       	adc	r19, r19
     e26:	44 1f       	adc	r20, r20
     e28:	aa 1f       	adc	r26, r26
     e2a:	a9 f3       	breq	.-22     	; 0xe16 <__divsf3_pse+0x10>
     e2c:	35 d0       	rcall	.+106    	; 0xe98 <__divsf3_pse+0x92>
     e2e:	0e 2e       	mov	r0, r30
     e30:	3a f0       	brmi	.+14     	; 0xe40 <__divsf3_pse+0x3a>
     e32:	e0 e8       	ldi	r30, 0x80	; 128
     e34:	32 d0       	rcall	.+100    	; 0xe9a <__divsf3_pse+0x94>
     e36:	91 50       	subi	r25, 0x01	; 1
     e38:	50 40       	sbci	r21, 0x00	; 0
     e3a:	e6 95       	lsr	r30
     e3c:	00 1c       	adc	r0, r0
     e3e:	ca f7       	brpl	.-14     	; 0xe32 <__divsf3_pse+0x2c>
     e40:	2b d0       	rcall	.+86     	; 0xe98 <__divsf3_pse+0x92>
     e42:	fe 2f       	mov	r31, r30
     e44:	29 d0       	rcall	.+82     	; 0xe98 <__divsf3_pse+0x92>
     e46:	66 0f       	add	r22, r22
     e48:	77 1f       	adc	r23, r23
     e4a:	88 1f       	adc	r24, r24
     e4c:	bb 1f       	adc	r27, r27
     e4e:	26 17       	cp	r18, r22
     e50:	37 07       	cpc	r19, r23
     e52:	48 07       	cpc	r20, r24
     e54:	ab 07       	cpc	r26, r27
     e56:	b0 e8       	ldi	r27, 0x80	; 128
     e58:	09 f0       	breq	.+2      	; 0xe5c <__divsf3_pse+0x56>
     e5a:	bb 0b       	sbc	r27, r27
     e5c:	80 2d       	mov	r24, r0
     e5e:	bf 01       	movw	r22, r30
     e60:	ff 27       	eor	r31, r31
     e62:	93 58       	subi	r25, 0x83	; 131
     e64:	5f 4f       	sbci	r21, 0xFF	; 255
     e66:	3a f0       	brmi	.+14     	; 0xe76 <__divsf3_pse+0x70>
     e68:	9e 3f       	cpi	r25, 0xFE	; 254
     e6a:	51 05       	cpc	r21, r1
     e6c:	78 f0       	brcs	.+30     	; 0xe8c <__divsf3_pse+0x86>
     e6e:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_inf>
     e72:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__fp_szero>
     e76:	5f 3f       	cpi	r21, 0xFF	; 255
     e78:	e4 f3       	brlt	.-8      	; 0xe72 <__divsf3_pse+0x6c>
     e7a:	98 3e       	cpi	r25, 0xE8	; 232
     e7c:	d4 f3       	brlt	.-12     	; 0xe72 <__divsf3_pse+0x6c>
     e7e:	86 95       	lsr	r24
     e80:	77 95       	ror	r23
     e82:	67 95       	ror	r22
     e84:	b7 95       	ror	r27
     e86:	f7 95       	ror	r31
     e88:	9f 5f       	subi	r25, 0xFF	; 255
     e8a:	c9 f7       	brne	.-14     	; 0xe7e <__divsf3_pse+0x78>
     e8c:	88 0f       	add	r24, r24
     e8e:	91 1d       	adc	r25, r1
     e90:	96 95       	lsr	r25
     e92:	87 95       	ror	r24
     e94:	97 f9       	bld	r25, 7
     e96:	08 95       	ret
     e98:	e1 e0       	ldi	r30, 0x01	; 1
     e9a:	66 0f       	add	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	bb 1f       	adc	r27, r27
     ea2:	62 17       	cp	r22, r18
     ea4:	73 07       	cpc	r23, r19
     ea6:	84 07       	cpc	r24, r20
     ea8:	ba 07       	cpc	r27, r26
     eaa:	20 f0       	brcs	.+8      	; 0xeb4 <__divsf3_pse+0xae>
     eac:	62 1b       	sub	r22, r18
     eae:	73 0b       	sbc	r23, r19
     eb0:	84 0b       	sbc	r24, r20
     eb2:	ba 0b       	sbc	r27, r26
     eb4:	ee 1f       	adc	r30, r30
     eb6:	88 f7       	brcc	.-30     	; 0xe9a <__divsf3_pse+0x94>
     eb8:	e0 95       	com	r30
     eba:	08 95       	ret

00000ebc <__fixsfsi>:
     ebc:	0e 94 65 07 	call	0xeca	; 0xeca <__fixunssfsi>
     ec0:	68 94       	set
     ec2:	b1 11       	cpse	r27, r1
     ec4:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__fp_szero>
     ec8:	08 95       	ret

00000eca <__fixunssfsi>:
     eca:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_splitA>
     ece:	88 f0       	brcs	.+34     	; 0xef2 <__fixunssfsi+0x28>
     ed0:	9f 57       	subi	r25, 0x7F	; 127
     ed2:	98 f0       	brcs	.+38     	; 0xefa <__fixunssfsi+0x30>
     ed4:	b9 2f       	mov	r27, r25
     ed6:	99 27       	eor	r25, r25
     ed8:	b7 51       	subi	r27, 0x17	; 23
     eda:	b0 f0       	brcs	.+44     	; 0xf08 <__fixunssfsi+0x3e>
     edc:	e1 f0       	breq	.+56     	; 0xf16 <__fixunssfsi+0x4c>
     ede:	66 0f       	add	r22, r22
     ee0:	77 1f       	adc	r23, r23
     ee2:	88 1f       	adc	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	1a f0       	brmi	.+6      	; 0xeee <__fixunssfsi+0x24>
     ee8:	ba 95       	dec	r27
     eea:	c9 f7       	brne	.-14     	; 0xede <__fixunssfsi+0x14>
     eec:	14 c0       	rjmp	.+40     	; 0xf16 <__fixunssfsi+0x4c>
     eee:	b1 30       	cpi	r27, 0x01	; 1
     ef0:	91 f0       	breq	.+36     	; 0xf16 <__fixunssfsi+0x4c>
     ef2:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_zero>
     ef6:	b1 e0       	ldi	r27, 0x01	; 1
     ef8:	08 95       	ret
     efa:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__fp_zero>
     efe:	67 2f       	mov	r22, r23
     f00:	78 2f       	mov	r23, r24
     f02:	88 27       	eor	r24, r24
     f04:	b8 5f       	subi	r27, 0xF8	; 248
     f06:	39 f0       	breq	.+14     	; 0xf16 <__fixunssfsi+0x4c>
     f08:	b9 3f       	cpi	r27, 0xF9	; 249
     f0a:	cc f3       	brlt	.-14     	; 0xefe <__fixunssfsi+0x34>
     f0c:	86 95       	lsr	r24
     f0e:	77 95       	ror	r23
     f10:	67 95       	ror	r22
     f12:	b3 95       	inc	r27
     f14:	d9 f7       	brne	.-10     	; 0xf0c <__fixunssfsi+0x42>
     f16:	3e f4       	brtc	.+14     	; 0xf26 <__fixunssfsi+0x5c>
     f18:	90 95       	com	r25
     f1a:	80 95       	com	r24
     f1c:	70 95       	com	r23
     f1e:	61 95       	neg	r22
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	8f 4f       	sbci	r24, 0xFF	; 255
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	08 95       	ret

00000f28 <__fp_cmp>:
     f28:	99 0f       	add	r25, r25
     f2a:	00 08       	sbc	r0, r0
     f2c:	55 0f       	add	r21, r21
     f2e:	aa 0b       	sbc	r26, r26
     f30:	e0 e8       	ldi	r30, 0x80	; 128
     f32:	fe ef       	ldi	r31, 0xFE	; 254
     f34:	16 16       	cp	r1, r22
     f36:	17 06       	cpc	r1, r23
     f38:	e8 07       	cpc	r30, r24
     f3a:	f9 07       	cpc	r31, r25
     f3c:	c0 f0       	brcs	.+48     	; 0xf6e <__fp_cmp+0x46>
     f3e:	12 16       	cp	r1, r18
     f40:	13 06       	cpc	r1, r19
     f42:	e4 07       	cpc	r30, r20
     f44:	f5 07       	cpc	r31, r21
     f46:	98 f0       	brcs	.+38     	; 0xf6e <__fp_cmp+0x46>
     f48:	62 1b       	sub	r22, r18
     f4a:	73 0b       	sbc	r23, r19
     f4c:	84 0b       	sbc	r24, r20
     f4e:	95 0b       	sbc	r25, r21
     f50:	39 f4       	brne	.+14     	; 0xf60 <__fp_cmp+0x38>
     f52:	0a 26       	eor	r0, r26
     f54:	61 f0       	breq	.+24     	; 0xf6e <__fp_cmp+0x46>
     f56:	23 2b       	or	r18, r19
     f58:	24 2b       	or	r18, r20
     f5a:	25 2b       	or	r18, r21
     f5c:	21 f4       	brne	.+8      	; 0xf66 <__fp_cmp+0x3e>
     f5e:	08 95       	ret
     f60:	0a 26       	eor	r0, r26
     f62:	09 f4       	brne	.+2      	; 0xf66 <__fp_cmp+0x3e>
     f64:	a1 40       	sbci	r26, 0x01	; 1
     f66:	a6 95       	lsr	r26
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	81 1d       	adc	r24, r1
     f6c:	81 1d       	adc	r24, r1
     f6e:	08 95       	ret

00000f70 <__fp_inf>:
     f70:	97 f9       	bld	r25, 7
     f72:	9f 67       	ori	r25, 0x7F	; 127
     f74:	80 e8       	ldi	r24, 0x80	; 128
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	08 95       	ret

00000f7c <__fp_nan>:
     f7c:	9f ef       	ldi	r25, 0xFF	; 255
     f7e:	80 ec       	ldi	r24, 0xC0	; 192
     f80:	08 95       	ret

00000f82 <__fp_pscA>:
     f82:	00 24       	eor	r0, r0
     f84:	0a 94       	dec	r0
     f86:	16 16       	cp	r1, r22
     f88:	17 06       	cpc	r1, r23
     f8a:	18 06       	cpc	r1, r24
     f8c:	09 06       	cpc	r0, r25
     f8e:	08 95       	ret

00000f90 <__fp_pscB>:
     f90:	00 24       	eor	r0, r0
     f92:	0a 94       	dec	r0
     f94:	12 16       	cp	r1, r18
     f96:	13 06       	cpc	r1, r19
     f98:	14 06       	cpc	r1, r20
     f9a:	05 06       	cpc	r0, r21
     f9c:	08 95       	ret

00000f9e <__fp_round>:
     f9e:	09 2e       	mov	r0, r25
     fa0:	03 94       	inc	r0
     fa2:	00 0c       	add	r0, r0
     fa4:	11 f4       	brne	.+4      	; 0xfaa <__fp_round+0xc>
     fa6:	88 23       	and	r24, r24
     fa8:	52 f0       	brmi	.+20     	; 0xfbe <__fp_round+0x20>
     faa:	bb 0f       	add	r27, r27
     fac:	40 f4       	brcc	.+16     	; 0xfbe <__fp_round+0x20>
     fae:	bf 2b       	or	r27, r31
     fb0:	11 f4       	brne	.+4      	; 0xfb6 <__fp_round+0x18>
     fb2:	60 ff       	sbrs	r22, 0
     fb4:	04 c0       	rjmp	.+8      	; 0xfbe <__fp_round+0x20>
     fb6:	6f 5f       	subi	r22, 0xFF	; 255
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	8f 4f       	sbci	r24, 0xFF	; 255
     fbc:	9f 4f       	sbci	r25, 0xFF	; 255
     fbe:	08 95       	ret

00000fc0 <__fp_split3>:
     fc0:	57 fd       	sbrc	r21, 7
     fc2:	90 58       	subi	r25, 0x80	; 128
     fc4:	44 0f       	add	r20, r20
     fc6:	55 1f       	adc	r21, r21
     fc8:	59 f0       	breq	.+22     	; 0xfe0 <__fp_splitA+0x10>
     fca:	5f 3f       	cpi	r21, 0xFF	; 255
     fcc:	71 f0       	breq	.+28     	; 0xfea <__fp_splitA+0x1a>
     fce:	47 95       	ror	r20

00000fd0 <__fp_splitA>:
     fd0:	88 0f       	add	r24, r24
     fd2:	97 fb       	bst	r25, 7
     fd4:	99 1f       	adc	r25, r25
     fd6:	61 f0       	breq	.+24     	; 0xff0 <__fp_splitA+0x20>
     fd8:	9f 3f       	cpi	r25, 0xFF	; 255
     fda:	79 f0       	breq	.+30     	; 0xffa <__fp_splitA+0x2a>
     fdc:	87 95       	ror	r24
     fde:	08 95       	ret
     fe0:	12 16       	cp	r1, r18
     fe2:	13 06       	cpc	r1, r19
     fe4:	14 06       	cpc	r1, r20
     fe6:	55 1f       	adc	r21, r21
     fe8:	f2 cf       	rjmp	.-28     	; 0xfce <__fp_split3+0xe>
     fea:	46 95       	lsr	r20
     fec:	f1 df       	rcall	.-30     	; 0xfd0 <__fp_splitA>
     fee:	08 c0       	rjmp	.+16     	; 0x1000 <__fp_splitA+0x30>
     ff0:	16 16       	cp	r1, r22
     ff2:	17 06       	cpc	r1, r23
     ff4:	18 06       	cpc	r1, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	f1 cf       	rjmp	.-30     	; 0xfdc <__fp_splitA+0xc>
     ffa:	86 95       	lsr	r24
     ffc:	71 05       	cpc	r23, r1
     ffe:	61 05       	cpc	r22, r1
    1000:	08 94       	sec
    1002:	08 95       	ret

00001004 <__fp_zero>:
    1004:	e8 94       	clt

00001006 <__fp_szero>:
    1006:	bb 27       	eor	r27, r27
    1008:	66 27       	eor	r22, r22
    100a:	77 27       	eor	r23, r23
    100c:	cb 01       	movw	r24, r22
    100e:	97 f9       	bld	r25, 7
    1010:	08 95       	ret

00001012 <__gesf2>:
    1012:	0e 94 94 07 	call	0xf28	; 0xf28 <__fp_cmp>
    1016:	08 f4       	brcc	.+2      	; 0x101a <__gesf2+0x8>
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	08 95       	ret

0000101c <_exit>:
    101c:	f8 94       	cli

0000101e <__stop_program>:
    101e:	ff cf       	rjmp	.-2      	; 0x101e <__stop_program>
